import logging
import os
import requests

logger = logging.getLogger('permissionpasta')

def create_github_pr(resource, role_name, terraform_code):
    """
    Create a GitHub pull request with the generated Terraform code
    
    Args:
        resource (dict): The resource details
        role_name (str): The name of the role to grant access to
        terraform_code (str): The generated Terraform code
        
    Returns:
        str: The PR URL if successful, None otherwise
    """
    github_token = os.environ.get('GITHUB_TOKEN')
    github_repo = os.environ.get('GITHUB_REPO')
    terraform_module_path = os.environ.get('TERRAFORM_MODULE_PATH')
    
    if not github_token or not github_repo or not terraform_module_path:
        logger.error("Missing GitHub environment variables, cannot create PR")
        return None
    
    try:
        # Create a branch name based on the resource and role
        resource_name = resource.get('resource_name', 'unknown')
        service_type = resource.get('resolved_type', resource.get('possible_types', ['unknown'])[0])
        branch_name = f"permissionpasta/{role_name}-{service_type}-{resource_name}"
        
        # PR title and description
        pr_title = f"Add {service_type} access to {resource_name} for {role_name}"
        pr_description = f"""
# Access Request for {role_name}

## Resource Details
- Resource: {resource_name}
- Type: {service_type}
- Access Level: {resource.get('access_level', 'read')}

## Terraform Changes
```hcl
{terraform_code}
```

This PR was generated by PermissionPasta. Please review the changes.
"""
        
        # Load the PR template if available
        pr_template_path = os.environ.get('PR_TEMPLATE')
        if pr_template_path and os.path.exists(pr_template_path):
            try:
                with open(pr_template_path, 'r') as file:
                    template = file.read()
                    pr_description = template.format(
                        role_name=role_name,
                        resource_name=resource_name,
                        resource_type=service_type,
                        access_level=resource.get('access_level', 'read'),
                        terraform_code=terraform_code
                    )
            except Exception as template_err:
                logger.warning(f"Could not use PR template: {template_err}")
        
        # TODO: Implement the actual GitHub API calls to create a PR
        # This is a placeholder implementation
        
        # For now, just log the PR information
        logger.info(f"Would create PR: {pr_title}")
        logger.info(f"Branch: {branch_name}")
        
        # Return a placeholder PR URL
        return f"https://github.com/{github_repo}/pull/123"
        
    except Exception as e:
        logger.error(f"Error creating GitHub PR: {e}")
        return None 